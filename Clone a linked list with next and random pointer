/*
class Node {
    int data;
    Node next, arb;

    Node(int d) 
    { 
        data = d;
        next = arb = null; 
        
    }
}*/

class Clone {
    //Function to clone a linked list with next and random pointer.
    Node copyList(Node head) {
        // your code here
        // 7 13 11 10 1
        //n 7 1 11 7 
        //0
        Node head2 = new Node(0);
        Node temp2 = head2 ;
        Node temp1 = head;
        
        //creating deep copy - 7 13 11 10 1
        while(temp1 != null){
            Node t = new Node(temp1.data);
            temp2.next = t;
            temp2 = t;
            temp1 = temp1.next;
        }
        head2 = head2.next;
        temp2 = head2;
        temp1 = head;
        
        //alternate connections
        Node temp = new Node(-1);
        while(temp1 != null){
            temp.next = temp1;
            temp1 = temp1.next;
            temp = temp.next;
            
            temp.next = temp2;
            temp2 = temp2.next;
            temp = temp.next;
        }
        temp2 = head2;
        temp1 = head;
        //assigning random pointers
        while(temp1 != null){
            if(temp1.arb == null) temp2.arb = null;
            else temp2.arb = temp1.arb.next;
            temp1 = temp2.next;
            if(temp1 != null) temp2 = temp1.next;
        }
        
        temp2 = head;
        temp1 = head;
        //seperating the lists
        while(temp1 != null){
            temp1.next = temp2.next;
            temp1 = temp1.next;
            if(temp1 == null) break;
            temp2.next = temp1.next;
            if(temp2.next == null) break;
            temp2 = temp2.next;
        }
        return head2;
        
    }
}

